/*
MyMiniFactory API

3D printable object API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectUpload{}

// ObjectUpload struct for ObjectUpload
type ObjectUpload struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ObjectStatusUrl *string `json:"object_status_url,omitempty"`
	ObjectUrl *string `json:"object_url,omitempty"`
	Files []FileUploadId `json:"files,omitempty"`
	Images []ImageUploadId `json:"images,omitempty"`
}

// NewObjectUpload instantiates a new ObjectUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectUpload() *ObjectUpload {
	this := ObjectUpload{}
	return &this
}

// NewObjectUploadWithDefaults instantiates a new ObjectUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectUploadWithDefaults() *ObjectUpload {
	this := ObjectUpload{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectUpload) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUpload) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectUpload) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ObjectUpload) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjectUpload) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUpload) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjectUpload) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjectUpload) SetName(v string) {
	o.Name = &v
}

// GetObjectStatusUrl returns the ObjectStatusUrl field value if set, zero value otherwise.
func (o *ObjectUpload) GetObjectStatusUrl() string {
	if o == nil || IsNil(o.ObjectStatusUrl) {
		var ret string
		return ret
	}
	return *o.ObjectStatusUrl
}

// GetObjectStatusUrlOk returns a tuple with the ObjectStatusUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUpload) GetObjectStatusUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectStatusUrl) {
		return nil, false
	}
	return o.ObjectStatusUrl, true
}

// HasObjectStatusUrl returns a boolean if a field has been set.
func (o *ObjectUpload) HasObjectStatusUrl() bool {
	if o != nil && !IsNil(o.ObjectStatusUrl) {
		return true
	}

	return false
}

// SetObjectStatusUrl gets a reference to the given string and assigns it to the ObjectStatusUrl field.
func (o *ObjectUpload) SetObjectStatusUrl(v string) {
	o.ObjectStatusUrl = &v
}

// GetObjectUrl returns the ObjectUrl field value if set, zero value otherwise.
func (o *ObjectUpload) GetObjectUrl() string {
	if o == nil || IsNil(o.ObjectUrl) {
		var ret string
		return ret
	}
	return *o.ObjectUrl
}

// GetObjectUrlOk returns a tuple with the ObjectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUpload) GetObjectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectUrl) {
		return nil, false
	}
	return o.ObjectUrl, true
}

// HasObjectUrl returns a boolean if a field has been set.
func (o *ObjectUpload) HasObjectUrl() bool {
	if o != nil && !IsNil(o.ObjectUrl) {
		return true
	}

	return false
}

// SetObjectUrl gets a reference to the given string and assigns it to the ObjectUrl field.
func (o *ObjectUpload) SetObjectUrl(v string) {
	o.ObjectUrl = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *ObjectUpload) GetFiles() []FileUploadId {
	if o == nil || IsNil(o.Files) {
		var ret []FileUploadId
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUpload) GetFilesOk() ([]FileUploadId, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ObjectUpload) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FileUploadId and assigns it to the Files field.
func (o *ObjectUpload) SetFiles(v []FileUploadId) {
	o.Files = v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ObjectUpload) GetImages() []ImageUploadId {
	if o == nil || IsNil(o.Images) {
		var ret []ImageUploadId
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUpload) GetImagesOk() ([]ImageUploadId, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ObjectUpload) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageUploadId and assigns it to the Images field.
func (o *ObjectUpload) SetImages(v []ImageUploadId) {
	o.Images = v
}

func (o ObjectUpload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ObjectStatusUrl) {
		toSerialize["object_status_url"] = o.ObjectStatusUrl
	}
	if !IsNil(o.ObjectUrl) {
		toSerialize["object_url"] = o.ObjectUrl
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	return toSerialize, nil
}

type NullableObjectUpload struct {
	value *ObjectUpload
	isSet bool
}

func (v NullableObjectUpload) Get() *ObjectUpload {
	return v.value
}

func (v *NullableObjectUpload) Set(val *ObjectUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectUpload(val *ObjectUpload) *NullableObjectUpload {
	return &NullableObjectUpload{value: val, isSet: true}
}

func (v NullableObjectUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



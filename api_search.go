/*
MyMiniFactory API

3D printable object API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SearchAPIService SearchAPI service
type SearchAPIService service

type ApiSearchGetRequest struct {
	ctx context.Context
	ApiService *SearchAPIService
	q *string
	page *string
	perPage *string
	sort *string
	order *string
	cat *string
	support *string
	tech *string
	complexity *string
	featured *string
	remix *string
	commercialUse *string
	exclusive *string
}

// Search query. See the details query syntax document
func (r ApiSearchGetRequest) Q(q string) ApiSearchGetRequest {
	r.q = &q
	return r
}

// Page number. Default is 1
func (r ApiSearchGetRequest) Page(page string) ApiSearchGetRequest {
	r.page = &page
	return r
}

// Number of results per page. Default is 20
func (r ApiSearchGetRequest) PerPage(perPage string) ApiSearchGetRequest {
	r.perPage = &perPage
	return r
}

// Sort results by: &#39;visits&#39;, &#39;date&#39;, &#39;popularity&#39;.
func (r ApiSearchGetRequest) Sort(sort string) ApiSearchGetRequest {
	r.sort = &sort
	return r
}

// Sorting order: &#39;desc&#39;, &#39;asc&#39; (Defaults to desc).
func (r ApiSearchGetRequest) Order(order string) ApiSearchGetRequest {
	r.order = &order
	return r
}

// Filter object of a certain category, by the category id. eg. cat&#x3D;{category_id}
func (r ApiSearchGetRequest) Cat(cat string) ApiSearchGetRequest {
	r.cat = &cat
	return r
}

// Filter printing support-free objects: 1: support-free
func (r ApiSearchGetRequest) Support(support string) ApiSearchGetRequest {
	r.support = &support
	return r
}

// Filter printing technology recommanded for the object: eg. &#39;DLP/SLA&#39;
func (r ApiSearchGetRequest) Tech(tech string) ApiSearchGetRequest {
	r.tech = &tech
	return r
}

// Filter object difficulty (How hard to build) : &#39;eas&#39;, &#39;med&#39;, &#39;diff&#39;
func (r ApiSearchGetRequest) Complexity(complexity string) ApiSearchGetRequest {
	r.complexity = &complexity
	return r
}

// Filter featured object: 0: Non-featured, 1: featured
func (r ApiSearchGetRequest) Featured(featured string) ApiSearchGetRequest {
	r.featured = &featured
	return r
}

// License filter: the designer accepted his object the remixed.
func (r ApiSearchGetRequest) Remix(remix string) ApiSearchGetRequest {
	r.remix = &remix
	return r
}

// License filter: the designer accepted commercial use of his object.
func (r ApiSearchGetRequest) CommercialUse(commercialUse string) ApiSearchGetRequest {
	r.commercialUse = &commercialUse
	return r
}

// License filter: this object should be shared exclusivly on MyMiniFactory.
func (r ApiSearchGetRequest) Exclusive(exclusive string) ApiSearchGetRequest {
	r.exclusive = &exclusive
	return r
}

func (r ApiSearchGetRequest) Execute() (*SearchGet200Response, *http.Response, error) {
	return r.ApiService.SearchGetExecute(r)
}

/*
SearchGet Method for SearchGet

Give search results according the the query. Searches objects by default.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchGetRequest
*/
func (a *SearchAPIService) SearchGet(ctx context.Context) ApiSearchGetRequest {
	return ApiSearchGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchGet200Response
func (a *SearchAPIService) SearchGetExecute(r ApiSearchGetRequest) (*SearchGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchAPIService.SearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "", "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "", "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "", "")
	}
	if r.cat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cat", r.cat, "", "")
	}
	if r.support != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "support", r.support, "", "")
	}
	if r.tech != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tech", r.tech, "", "")
	}
	if r.complexity != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "complexity", r.complexity, "", "")
	}
	if r.featured != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "featured", r.featured, "", "")
	}
	if r.remix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remix", r.remix, "", "")
	}
	if r.commercialUse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commercial_use", r.commercialUse, "", "")
	}
	if r.exclusive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclusive", r.exclusive, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

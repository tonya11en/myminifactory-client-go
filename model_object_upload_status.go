/*
MyMiniFactory API

3D printable object API

API version: 2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObjectUploadStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectUploadStatus{}

// ObjectUploadStatus struct for ObjectUploadStatus
type ObjectUploadStatus struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Files []FileUploadStatus `json:"files,omitempty"`
	Images []ImageUploadStatus `json:"images,omitempty"`
}

// NewObjectUploadStatus instantiates a new ObjectUploadStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectUploadStatus() *ObjectUploadStatus {
	this := ObjectUploadStatus{}
	return &this
}

// NewObjectUploadStatusWithDefaults instantiates a new ObjectUploadStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectUploadStatusWithDefaults() *ObjectUploadStatus {
	this := ObjectUploadStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObjectUploadStatus) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUploadStatus) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObjectUploadStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ObjectUploadStatus) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjectUploadStatus) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUploadStatus) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjectUploadStatus) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjectUploadStatus) SetName(v string) {
	o.Name = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *ObjectUploadStatus) GetFiles() []FileUploadStatus {
	if o == nil || IsNil(o.Files) {
		var ret []FileUploadStatus
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUploadStatus) GetFilesOk() ([]FileUploadStatus, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ObjectUploadStatus) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FileUploadStatus and assigns it to the Files field.
func (o *ObjectUploadStatus) SetFiles(v []FileUploadStatus) {
	o.Files = v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ObjectUploadStatus) GetImages() []ImageUploadStatus {
	if o == nil || IsNil(o.Images) {
		var ret []ImageUploadStatus
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectUploadStatus) GetImagesOk() ([]ImageUploadStatus, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ObjectUploadStatus) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageUploadStatus and assigns it to the Images field.
func (o *ObjectUploadStatus) SetImages(v []ImageUploadStatus) {
	o.Images = v
}

func (o ObjectUploadStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectUploadStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	return toSerialize, nil
}

type NullableObjectUploadStatus struct {
	value *ObjectUploadStatus
	isSet bool
}

func (v NullableObjectUploadStatus) Get() *ObjectUploadStatus {
	return v.value
}

func (v *NullableObjectUploadStatus) Set(val *ObjectUploadStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectUploadStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectUploadStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectUploadStatus(val *ObjectUploadStatus) *NullableObjectUploadStatus {
	return &NullableObjectUploadStatus{value: val, isSet: true}
}

func (v NullableObjectUploadStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectUploadStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


